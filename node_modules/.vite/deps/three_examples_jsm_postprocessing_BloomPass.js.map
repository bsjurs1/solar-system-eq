{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/ConvolutionShader.js", "../../three/examples/jsm/postprocessing/BloomPass.js"],
  "sourcesContent": ["import {\n\tVector2\n} from '../../../build/three.module.js';\n\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n */\n\nvar ConvolutionShader = {\n\n\tdefines: {\n\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\n\t\t'KERNEL_SIZE_INT': '25'\n\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\n\t\t'cKernel': { value: [] }\n\n\t},\n\n\tvertexShader: [\n\n\t\t'uniform vec2 uImageIncrement;',\n\n\t\t'varying vec2 vUv;',\n\n\t\t'void main() {',\n\n\t\t'\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;',\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t'}'\n\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\n\t\t'uniform float cKernel[ KERNEL_SIZE_INT ];',\n\n\t\t'uniform sampler2D tDiffuse;',\n\t\t'uniform vec2 uImageIncrement;',\n\n\t\t'varying vec2 vUv;',\n\n\t\t'void main() {',\n\n\t\t'\tvec2 imageCoord = vUv;',\n\t\t'\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );',\n\n\t\t'\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {',\n\n\t\t'\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];',\n\t\t'\t\timageCoord += uImageIncrement;',\n\n\t\t'\t}',\n\n\t\t'\tgl_FragColor = sum;',\n\n\t\t'}'\n\n\n\t].join( '\\n' ),\n\n\tbuildKernel: function ( sigma ) {\n\n\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\tfunction gauss( x, sigma ) {\n\n\t\t\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n\t\t}\n\n\t\tvar i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\t\thalfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\tvalues = new Array( kernelSize );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < kernelSize; ++ i ) {\n\n\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\tsum += values[ i ];\n\n\t\t}\n\n\t\t// normalize the kernel\n\n\t\tfor ( i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\treturn values;\n\n\t}\n\n};\n\nexport { ConvolutionShader };\n", "import {\n\tAdditiveBlending,\n\tLinearFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from '../../../build/three.module.js';\nimport { Pass } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nvar BloomPass = function ( strength, kernelSize, sigma, resolution ) {\n\n\tPass.call( this );\n\n\tstrength = ( strength !== undefined ) ? strength : 1;\n\tkernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;\n\tsigma = ( sigma !== undefined ) ? sigma : 4.0;\n\tresolution = ( resolution !== undefined ) ? resolution : 256;\n\n\t// render targets\n\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\tthis.renderTargetX = new WebGLRenderTarget( resolution, resolution, pars );\n\tthis.renderTargetX.texture.name = 'BloomPass.x';\n\tthis.renderTargetY = new WebGLRenderTarget( resolution, resolution, pars );\n\tthis.renderTargetY.texture.name = 'BloomPass.y';\n\n\t// copy material\n\n\tif ( CopyShader === undefined )\n\t\tconsole.error( 'THREE.BloomPass relies on CopyShader' );\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\tthis.copyUniforms[ 'opacity' ].value = strength;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\ttransparent: true\n\n\t} );\n\n\t// convolution material\n\n\tif ( ConvolutionShader === undefined )\n\t\tconsole.error( 'THREE.BloomPass relies on ConvolutionShader' );\n\n\tvar convolutionShader = ConvolutionShader;\n\n\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\n\n\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\tuniforms: this.convolutionUniforms,\n\t\tvertexShader: convolutionShader.vertexShader,\n\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\tdefines: {\n\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t}\n\n\t} );\n\n\tthis.needsSwap = false;\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: BloomPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n} );\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n"],
  "mappings": "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",
  "names": ["sigma"]
}
